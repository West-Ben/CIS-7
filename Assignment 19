using System;
using System.Collections.Generic;

namespace Assinment19
{
    public class BinaryTree
    {
        public class Node
        {
            public string Name { get; set; }
            public Node LeftNode { get; set; }
            public Node RightNode { get; set; }
        }

        private static string input = "";
        private static List<Node> listOfNodes;
        private static int numOfLeafs;
        private static int Depth = 0;
        private static bool isComplete = false;
        private static Node nodeParent;

        public static void Main(string[] args)
        {
            int number = 0;
            listOfNodes = new List<Node>();


            Console.WriteLine("Enter Root Node:\n (or enter q to quit)");
            AddNode();

            Console.Clear();

            while (input != "q")
            {
                Display();

                Console.WriteLine("1) Add left child to node\n2) Add right child to node\n(or enter q to quit)");
                number = InputCheck();

                switch (number)
                {
                    case 1:
                        AddChildNode(number);
                        break;
                    case 2:
                        AddChildNode(number);
                        break;
                    default:
                        break;
                }
                
                Console.Clear();
            }
        }

        private static int InputCheck()
        {
            int num;

            input = Console.ReadLine();
            if (input == "q") Environment.Exit(0);

            while (!int.TryParse(input, out num))
            {
                Console.WriteLine("Error, incorrect entry: ");
                input = Console.ReadLine();
                if (input == "q") Environment.Exit(0);
            }

            return num;
        }

        private static Node AddNode()
        {
            Console.Write("Name your node: ");
            input = Console.ReadLine();

            Node node = new Node()
            {
                Name = input
            };

            listOfNodes.Add(node);
            return node;
        }

        private static void AddChildNode(int LorR)
        {
            Node nodeChild = AddNode();
            Console.Write("Choose node to be the parent: ");
            input = Console.ReadLine();

            if (!listOfNodes.Exists(x => x.Name == input))
            {
                while (!listOfNodes.Exists(x => x.Name == input))
                {

                    if (!listOfNodes.Exists(x => x.Name == input))
                    {
                        Console.Write("\nNode does not exist\nChoose node to be the parent: ");
                        input = Console.ReadLine();
                    }
                    else nodeParent = listOfNodes.Find(x => x.Name == input);
                }
            }
            else nodeParent = listOfNodes.Find(x => x.Name == input);

            switch (LorR)
            {
                case 1:
                    nodeParent.LeftNode = nodeChild;
                    break;
                case 2:
                    nodeParent.RightNode = nodeChild;
                    break;
                default:
                    break;
            }
        }

        private static void Display()
        {
            //All nodes
            Console.Write("Nodes in tree: ");

            for (int i = 0; i < listOfNodes.Count; i++)
            {
                Console.Write(listOfNodes[i].Name + " ");
            }

            Console.WriteLine("\n");

            //Number of nodes
            Console.Write("Number of nodes: " + listOfNodes.Count);

            Console.WriteLine("\n");

            //Depth of tree
            Console.Write("Depth of tree: ");
            DepthofTree(listOfNodes[0], 1);
            Console.Write(Depth);

            Console.WriteLine("\n");

            //is tree full?
            Console.Write("Full tree: ");
            numOfLeafs = Convert.ToInt32(Math.Pow(2, Depth - 1));
            IsFull(listOfNodes[0], 1, Depth);

            if (numOfLeafs == 0)
                Console.Write("True");
            else
                Console.Write("False");

            Console.WriteLine("\n");

            //is tree complete?
            Console.Write("Complete tree: ");
            IsComplete(listOfNodes[0],1, Depth);

            if (isComplete)
                Console.Write("True");
            else
                Console.Write("False");

            Console.WriteLine("\n");


            //preorder traversal?
            Console.Write("Preorder Traversal: ");
            PreOrder(listOfNodes[0]);

            Console.WriteLine("\n");

            //inorder traversal?
            Console.Write("InOrder Traversal: ");
            InOrder(listOfNodes[0]);

            Console.WriteLine("\n");

            //postorder traversal?
            Console.Write("PostOrder Traversal: ");
            PostOrder(listOfNodes[0]);

            Console.WriteLine("\n");

        }
        
        private static void IsFull(Node node, int depth, int maxDepth)
        {
            if (node.LeftNode == null && node.RightNode == null)
            {
                if (depth == maxDepth)
                {
                    numOfLeafs--;
                }
                return;
            }

            if (node.LeftNode != null)
            {
                IsFull(node.LeftNode,depth + 1,maxDepth);
            }

            if (node.RightNode != null)
            {
                IsFull(node.RightNode,depth + 1, maxDepth);
            }
        }

        //is tree complete?
        private static void IsComplete(Node node, int depth, int maxDepth)
        {
            if (node.LeftNode == null && node.RightNode == null)
            {
                return;
            }

            if (node.LeftNode != null)
            {
                if(node.LeftNode.LeftNode == null && node.LeftNode.RightNode == null && (depth + 1) == maxDepth)
                {
                    isComplete = true;
                }

                IsComplete(node.LeftNode,depth + 1, maxDepth);
            }

            if (node.RightNode != null)
            {
                if (node.RightNode.LeftNode == null && node.RightNode.RightNode == null && (depth + 1) >= maxDepth)
                {
                    isComplete = false;
                }

                IsComplete(node.RightNode,depth + 1, maxDepth);
            }
        }

        private static void DepthofTree(Node node,int depth)
        {
            if (node.LeftNode == null && node.RightNode == null)
            {
                if (depth > Depth)
                {
                    Depth = depth;
                }
                return;
            }

            if (node.LeftNode != null)
            {
                DepthofTree(node.LeftNode, depth + 1);
            }

            if (node.RightNode != null)
            {
                DepthofTree(node.RightNode, depth + 1);
            }
            
        }

        private static void PreOrder(Node node)
        {
            Console.Write(node.Name + " ");

            if (node.LeftNode == null && node.RightNode == null)
            {
                return;
            }

            if (node.LeftNode != null)
            {
                PreOrder(node.LeftNode);
            }

            if (node.RightNode != null)
            {
                PreOrder(node.RightNode);
            }
        }

        private static void InOrder(Node node)
        {

            if (node.LeftNode == null && node.RightNode == null)
            {
                Console.Write(node.Name + " ");
                return;
            }

            if (node.LeftNode != null)
            {
                PreOrder(node.LeftNode);
                Console.Write(node.Name + " ");
            }

            if (node.RightNode != null)
            {
                PreOrder(node.RightNode);
            }
        }

        private static void PostOrder(Node node)
        {
            if (node.LeftNode == null && node.RightNode == null)
            {
                Console.Write(node.Name + " ");
                return;
            }

            if (node.LeftNode != null)
            {
                PreOrder(node.LeftNode);
            }

            if (node.RightNode != null)
            {
                PreOrder(node.RightNode);
                Console.Write(node.Name + " ");
            }
            else Console.Write(node.Name + " ");
        }
    }
}
