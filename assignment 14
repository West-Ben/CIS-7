using System;using System.Collections.Generic;
namespace Assinment14
{
   public class FactorialFibonacci
   {
      private static string input = "";           private static List<int> stackList = new List<int>();                public static void Main(string[] args)                {                        int n = 0;                        while (input != "q")                        {                                Console.WriteLine("Choose a recursive algorithm (or enter q to quit)\n1) Factorial\n2) Fibonacci\nOption:");                                n = InputCheck();                                                            switch(n)                {                    case 1:                        Console.WriteLine("Enter a factorial number greater than 0: (or enter q to quit)\n:");                                        n = PositiveCheck();                         Console.WriteLine("The Factorial of " + n + " = " + Factorial(n));                    break;                    case 2:                                            Console.WriteLine("Enter a factorial number greater than 0: (or enter q to quit)\n:");                                        n = PositiveCheck();                         Console.WriteLine("The Fibonacci of " + n + " = " + Fibonacci(n));                    break;                    default:                        Console.WriteLine("Error, incorrect entry: ");                      break;                }                                stackList.Clear();                                Console.ReadLine();                Console.Clear();            }        }                private static int InputCheck()        {            int num;            input = Console.ReadLine();                        if (input == "q") Environment.Exit(0);                        while (!int.TryParse(input, out num))            {                Console.WriteLine("Error, incorrect entry: ");                input = Console.ReadLine();            }                        return num;        }                private static int PositiveCheck()        {            int num;                        do            {                input = Console.ReadLine();                                if (input == "q") Environment.Exit(0);                                while (!int.TryParse(input, out num))                {                    Console.WriteLine("Error, incorrect entry: ");                    input = Console.ReadLine();                }                                if(int.Parse(input) < 0)                {                    Console.WriteLine("Error!you must enter a number greater than zero. " );                }                            }while(int.Parse(input) < 0);                        return num;        }                private static void printStack()        {            for(int i = 0; i < stackList.Count; i++ )            {                Console.WriteLine("Stack " + (i + 1) + ": n = " + stackList[i] );            }                        Console.ReadLine();        }                private static int Factorial(int n)        {            int prod;                        stackList.Add(n);            printStack();                        if(n <= 1) return 1;            else            {                prod = n * Factorial(n - 1);                stackList.RemoveAt(stackList.Count - 1);                printStack();                return prod;            }        }                private static int Fibonacci(int n)        {            int sum;
            stackList.Add(n);            printStack();                        if(n <= 2){              stackList.RemoveAt(stackList.Count - 1);              printStack();             return 1;            }             else             {              sum = Fibonacci(n-1) + Fibonacci(n-2);              stackList.RemoveAt(stackList.Count - 1);              printStack();              return sum;            }        }            }}          
