
using System;using System.Collections.Generic;namespace Assinment11{        public class GreatestCommonDenominator        {                    private static string input = "";            public static void Main(string[] args)      {                      int n = 0;                    List<int> Start = new List<int>();          List<int> End = new List<int>();          List<int> Aux = new List<int>();                    while (input != "q")                      {                              Console.WriteLine("Enter the number of disk for the Tower of Hanoi: (or enter q to quit)");              n = InputCheck();                            fillStart(n,ref Start);              printTowers(ref Start,ref End,ref Aux);          }       }              private static int InputCheck()      {        int num;                      input = Console.ReadLine();                if (input == "q") Environment.Exit(0);                while (!int.TryParse(input, out num))        {          Console.WriteLine("Error, incorrect entry: ");          input = Console.ReadLine();        }              return num;      }                private static void fillStart(int n,ref List<int> Start)      {        for(int i = 0; i < n; i++)        {          Start.Add(i + 1);        }      }                private static void printTowers(ref List<int> Start, ref List<int> End, ref List<int> Aux)      {                Console.Write("\nStart: ");        for(int i = 0; i < Start.Count; i++)        {          Console.Write(" " + Start[i] + ", " );        }                          Console.Write("\nEnd: ");        for(int i = 0; i < End.Count; i++)        {          Console.Write(" " + End[i] + ", " );        }                          Console.Write("\nAux: ");        for(int i = 0; i < Aux.Count; i++)        {          Console.Write(" " + Aux[i] + ", " );        }        Console.WriteLine("\n");      }            private static void Move(n, ref List<int> Start, ref List<int> End, ref List<int> Aux )      {        if(n > 0)        {          Move(n-1,ref Start, ref Aux, ref End);          //printTowers(ref Start,ref End,ref Aux);          Console.WriteLine("Start to End");          Move(n-1,ref Aux, ref End, ref Start);        }      }  }}          
