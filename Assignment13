using System;
using System.Collections.Generic;
namespace Assinment13
{
    public class Tower
    {
        public string name;
        public List<int> discs = new List<int>();

        public Tower(string name)
        {
            this.name = name;
        }
    }
    
    public class TowerOfHanoi
    {
        private static string input = "";
        
        public static void Main(string[] args)
        {
            int n = 0;

            Tower Start = new Tower("A");
            Tower End = new Tower("B");
            Tower Aux = new Tower("C");

            while (input != "q")
            {
                Console.WriteLine("Enter the number of disk for the Tower of Hanoi: (or enter q to quit)");
                n = InputCheck();
                
                fillStart(n, ref Start);
                printTowers(ref Start, ref End, ref Aux);
                Move(n,ref Start,ref End,ref Aux);
            }
        }

        private static int InputCheck()
        {
            int num;

            input = Console.ReadLine();

            if (input == "q") Environment.Exit(0);

            while (!int.TryParse(input, out num))
            {
                Console.WriteLine("Error, incorrect entry: ");
                input = Console.ReadLine();
            }

            return num;
        }

        private static void fillStart(int n, ref Tower Start)
        {
            for (int i = n; i > 0; i--)
            {
                Start.discs.Add(i);
            }
        }

        private static void printTowers(ref Tower Start, ref Tower End, ref Tower Aux)
        {
            

            Console.Write("\n{0}: ", Start.name);

            for (int i = 0; i < Start.discs.Count; i++)
            {
                Console.Write(" " + Start.discs[i] + ", ");
            }

            Console.Write("\n{0}: ", End.name);

            for (int i = 0; i < End.discs.Count; i++)
            {
                Console.Write(" " + End.discs[i] + ", ");
            }

            Console.Write("\n{0}: ", Aux.name);

            for (int i = 0; i < Aux.discs.Count; i++)
            {
                Console.Write(" " + Aux.discs[i] + ", ");
            }

            Console.WriteLine("\n");
        }

        private static void Move(int n, ref Tower Start, ref Tower End, ref Tower Aux)
        {
            if (n > 0)
            {
                Move(n - 1, ref Start, ref Aux, ref End);
                Start.discs.RemoveAt((Start.discs.Count - 1));
                End.discs.Add(n);
                Console.WriteLine("move disc {0} from tower {1} to tower {2}", n,Start.name,End.name );
                Console.WriteLine("n = {0}", n);

                printTowers(ref Start,ref End,ref Aux);
                

                Move(n - 1,ref Aux, ref End, ref Start);
            }
        }
    }
}          
